import { useEffect, useState } from "react";
import { api } from "../api";
import Swal from "sweetalert2";
import jsPDF from "jspdf";
import "jspdf-autotable";
import "../font/Sarabun-Regular-normal.js";
import "../font/Sarabun-ExtraBold-normal.js";

export default function AdminRepairManager() {
  const [bookings, setBookings] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [parts, setParts] = useState([]);
  const [repairItems, setRepairItems] = useState([]);
  const [selectedBooking, setSelectedBooking] = useState(null);
  const [bookingDetail, setBookingDetail] = useState(null);
  const [currentStatus, setCurrentStatus] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [loading, setLoading] = useState(true);
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  useEffect(() => {
    fetchBookings();
    fetchParts();
  }, []);

  const fetchBookings = async () => {
    try {
      const data = await api("/api/bookings");
      if (data.success) {
        console.log("‚úÖ Bookings fetched:", data.bookings);
        setBookings(data.bookings);
        setFiltered(data.bookings);
      }
    } catch (err) {
      console.error("‚ùå Error fetching bookings:", err);
      Swal.fire("‚ùå", "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "error");
    } finally {
      setLoading(false);
    }
  };

  const fetchParts = async () => {
    try {
      const data = await api("/api/parts");
      if (data.success) setParts(data.parts || []);
    } catch {
      Swal.fire("‚ùå", "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "error");
    }
  };

  // ‚úÖ Map ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const getStatus = (id) => {
    switch (id) {
      case 1:
        return { text: "‡∏£‡∏≠‡∏ä‡πà‡∏≤‡∏á", class: "pending" };
      case 2:
        return { text: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡πà‡∏≠‡∏°", class: "progress" };
      case 3:
        return { text: "‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß", class: "done" };
      case 4:
        return { text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á", class: "cancel" };
      case 5:
        return { text: "‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", class: "waiting" };
      default:
        return { text: "-", class: "unknown" };
    }
  };

  // ‚úÖ ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  useEffect(() => {
    let filteredData = bookings;

    if (searchTerm) {
      filteredData = filteredData.filter(
        (b) =>
          b.license_plate?.toLowerCase().includes(searchTerm.toLowerCase()) ||
          b.model?.toLowerCase().includes(searchTerm.toLowerCase()) ||
          b.owner_name?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (statusFilter !== "all") {
      filteredData = filteredData.filter(
        (b) => String(b.status_id) === String(statusFilter)
      );
    }

    if (startDate && endDate) {
      filteredData = filteredData.filter((b) => {
        const d = new Date(b.date);
        return d >= new Date(startDate) && d <= new Date(endDate);
      });
    }

    setFiltered(filteredData);
  }, [searchTerm, statusFilter, startDate, endDate, bookings]);

  // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Popup
  const openPopup = async (booking_id, status_id) => {
    setSelectedBooking(booking_id);
    setCurrentStatus(status_id);
    try {
      const [repairRes, detailRes] = await Promise.all([
        api(`/api/repair-items/${booking_id}`),
        api(`/api/bookings/${booking_id}`)
      ]);
      if (repairRes.success) setRepairItems(repairRes.items || []);
      if (detailRes.success) setBookingDetail(detailRes.booking);
    } catch {
      Swal.fire("‚ùå", "‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "error");
    }
  };

  const closePopup = () => {
    setSelectedBooking(null);
    setRepairItems([]);
    setBookingDetail(null);
  };

  // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const updateStatus = async (e) => {
    const newStatus = Number(e.target.value);
    try {
      const res = await api(`/api/bookings/${selectedBooking}`, {
        method: "PUT",
        body: { status_id: newStatus },
      });
      if (res.success) {
        setCurrentStatus(newStatus);
        Swal.fire("‚úÖ", "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "success");
        fetchBookings();
      }
    } catch {
      Swal.fire("‚ùå", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ", "error");
    }
  };

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
  const addRepairItem = async (e) => {
    e.preventDefault();
    const form = e.target;
    const part_id = form.part_id.value;
    const quantity = Number(form.quantity.value);
    const part = parts.find((p) => p.part_id === part_id);

    if (!part) return Swal.fire("‚ùå", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", "error");

    try {
      const res = await api("/api/repair-items", {
        method: "POST",
        body: {
          booking_id: selectedBooking,
          part_id,
          quantity,
          unit_price: Number(part.unit_price),
        },
      });
      if (res.success) {
        Swal.fire("‚úÖ", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "success");
        form.reset();
        openPopup(selectedBooking, currentStatus);
      }
    } catch {
      Swal.fire("‚ùå", "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "error");
    }
  };

  // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤
  const totalParts = repairItems.reduce(
    (sum, i) => sum + Number(i.unit_price) * Number(i.quantity),
    0
  );
  const service = Number(bookingDetail?.service || 0);
  const freight = bookingDetail?.transport_required ? Number(bookingDetail?.freight || 0) : 0;
  const grandTotal = totalParts + service + freight;

  // ‚úÖ ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à PDF
  const printPDF = () => {
    if (!bookingDetail) return;
    const doc = new jsPDF({ orientation: "portrait", unit: "mm", format: "a4" });
    doc.setFont("Sarabun-Regular");
    doc.setFontSize(16);
    doc.text("‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ã‡πà‡∏≠‡∏°‡∏£‡∏ñ (Repair Invoice)", 65, 18);
    doc.line(14, 22, 196, 22);
    doc.setFontSize(11);
    doc.text(`‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô: #${bookingDetail.booking_id}`, 14, 30);
    doc.text(`‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${new Date(bookingDetail.date).toLocaleDateString("th-TH")}`, 130, 30);
    doc.text(`‡∏£‡∏ñ: ${bookingDetail.model} (${bookingDetail.license_plate})`, 14, 38);
    doc.text(`‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${bookingDetail.description || "-"}`, 14, 46);

    const tableData = repairItems.map((i, idx) => [
      idx + 1,
      i.partname,
      i.quantity,
      `${Number(i.unit_price).toLocaleString()} ‡∏ø`,
      `${(i.unit_price * i.quantity).toLocaleString()} ‡∏ø`,
    ]);

    doc.autoTable({
      head: [["#", "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", "‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢", "‡∏£‡∏ß‡∏°"]],
      body: tableData,
      startY: 56,
      theme: "grid",
      styles: { font: "Sarabun-Regular", fontSize: 10 },
      headStyles: { fillColor: [50, 100, 200], textColor: 255 },
    });

    let finalY = doc.lastAutoTable.finalY + 10;
    doc.text(`üí∞ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${grandTotal.toLocaleString()} ‡∏ö‡∏≤‡∏ó`, 150, finalY);
    doc.text("‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ____________________", 14, finalY + 20);
    doc.save(`Repair_${bookingDetail.booking_id}.pdf`);
  };

  if (loading) return <div className="loading">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>;

  return (
    <div className="page-container">
      <h1 className="page-title">üß∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏° (Admin)</h1>

      {/* ‚úÖ Filter Bar */}
      <div className="filter-bar">
        <input
          type="text"
          placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏ä‡∏∑‡πà‡∏≠ / ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô / ‡∏£‡∏∏‡πà‡∏ô)"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        <select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>
          <option value="all">‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</option>
          <option value="1">‚è≥ ‡∏£‡∏≠‡∏ä‡πà‡∏≤‡∏á</option>
          <option value="2">üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡πà‡∏≠‡∏°</option>
          <option value="5">üí∞ ‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</option>
          <option value="3">‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</option>
          <option value="4">‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</option>
        </select>
        <input type="date" value={startDate} onChange={(e) => setStartDate(e.target.value)} />
        <input type="date" value={endDate} onChange={(e) => setEndDate(e.target.value)} />
        <button className="btn btn-primary" onClick={fetchBookings}>üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä</button>
      </div>

      {/* ‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á */}
      <div className="table-container wide">
        <table className="table big-table">
          <thead>
            <tr>
              <th>‡∏£‡∏´‡∏±‡∏™</th>
              <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
              <th>‡πÄ‡∏ß‡∏•‡∏≤</th>
              <th>‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ</th>
              <th>‡∏£‡∏ñ</th>
              <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
              <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
              <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
            </tr>
          </thead>
          <tbody>
            {filtered.map((b) => {
              const s = getStatus(b.status_id);
              return (
                <tr key={b.booking_id}>
                  <td>{b.booking_id}</td>
                  <td>{new Date(b.date).toLocaleDateString("th-TH")}</td>
                  <td>{b.time}</td>
                  <td>{b.owner_name || "-"}</td>
                  <td>{b.license_plate} ({b.model})</td>
                  <td>{b.description || "-"}</td>
                  <td>
                    <span className={`badge ${s.class}`}>
                      {b.status_name || s.text || "-"}
                    </span>
                  </td>
                  <td>
                    <button className="btn btn-detail" onClick={() => openPopup(b.booking_id, b.status_id)}>üßæ</button>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>

      {/* ‚úÖ Popup */}
      {selectedBooking && bookingDetail && (
        <div className="popup-overlay">
          <div className="popup-card compact">
            <h4 className="popup-title">üßæ ‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏° #{selectedBooking}</h4>

            <div className="info-grid">
              <div><b>‡∏£‡∏ñ:</b> {bookingDetail.model} ({bookingDetail.license_plate})</div>
              <div><b>‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á:</b> {bookingDetail.owner_name || "-"}</div>
              <div><b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</b> {new Date(bookingDetail.date).toLocaleDateString("th-TH")}</div>
              <div><b>‡πÄ‡∏ß‡∏•‡∏≤:</b> {bookingDetail.time}</div>
              <div><b>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</b> {bookingDetail.description || "-"}</div>
              <div><b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> {bookingDetail.status_name || getStatus(bookingDetail.status_id).text || "-"}</div>
            </div>

            <div className="status-change">
              <label>‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</label>
              <select value={currentStatus} onChange={updateStatus}>
                <option value={1}>‚è≥ ‡∏£‡∏≠‡∏ä‡πà‡∏≤‡∏á</option>
                <option value={2}>üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡πà‡∏≠‡∏°</option>
                <option value={5}>üí∞ ‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</option>
                <option value={3}>‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</option>
                <option value={4}>‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</option>
              </select>
            </div>

            <div className="popup-actions">
              <button className="btn btn-print" onClick={printPDF}>üñ®Ô∏è ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à</button>
              <button className="btn btn-secondary" onClick={closePopup}>‡∏õ‡∏¥‡∏î</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
