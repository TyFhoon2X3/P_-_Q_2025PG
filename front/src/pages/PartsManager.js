import React, { useEffect, useState } from "react";
import axios from "axios";
import Swal from "sweetalert2";
import "../styles/PartsManager.css";

const API_URL = "http://localhost:3000/api/parts";

const getAuthHeader = () => {
  const token = localStorage.getItem("token");
  return token ? { headers: { Authorization: `Bearer ${token}` } } : {};
};

function PartsManager() {
  const [parts, setParts] = useState([]);
  const [filteredParts, setFilteredParts] = useState([]);
  const [form, setForm] = useState({
    name: "",
    marque: "",
    quantity: "",
    unit_price: "",
  });
  const [editingId, setEditingId] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");

  // pagination
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤
  useEffect(() => {
    fetchParts();
  }, []);

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const fetchParts = async () => {
    try {
      const res = await axios.get(API_URL, getAuthHeader());
      const data = res.data.parts || [];
      setParts(data);
      setFilteredParts(data);
    } catch (err) {
      console.error("Error loading parts:", err);
      Swal.fire("‚ùå", "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "error");
    }
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const handleSearch = (e) => {
    const value = e.target.value.toLowerCase();
    setSearchTerm(value);
    const filtered = parts.filter(
      (part) =>
        part.name.toLowerCase().includes(value) ||
        part.marque.toLowerCase().includes(value) ||
        part.part_id.toLowerCase().includes(value)
    );
    setFilteredParts(filtered);
    setCurrentPage(1); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
  };

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå
  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡πÄ‡∏û‡∏¥‡πà‡∏° / ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!form.name || !form.marque || !form.quantity || !form.unit_price)
      return Swal.fire("‚ö†Ô∏è", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö", "info");

    try {
      if (editingId) {
        await axios.put(`${API_URL}/${editingId}`, form, getAuthHeader());
        Swal.fire("‚úÖ", "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "success");
      } else {
        await axios.post(API_URL, form, getAuthHeader());
        Swal.fire("‚úÖ", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "success");
      }

      setForm({ name: "", marque: "", quantity: "", unit_price: "" });
      setEditingId(null);
      fetchParts();
    } catch (err) {
      console.error("Save error:", err);
      Swal.fire("‚ùå", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ", "error");
    }
  };

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const handleEdit = (part) => {
    setForm({
      name: part.name,
      marque: part.marque,
      quantity: part.quantity,
      unit_price: part.unit_price,
    });
    setEditingId(part.part_id);
  };

  // ‚úÖ ‡∏•‡∏ö‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
  const handleDelete = async (id) => {
    const result = await Swal.fire({
      title: "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
      text: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#e74c3c",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "‡∏•‡∏ö‡πÄ‡∏•‡∏¢",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    });

    if (!result.isConfirmed) return;

    try {
      await axios.delete(`${API_URL}/${id}`, getAuthHeader());
      await fetchParts();
      Swal.fire("‚úÖ", "‡∏•‡∏ö‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success");
    } catch (err) {
      console.error("Delete error:", err);
      Swal.fire("‚ùå", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ", "error");
    }
  };

  // ‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const resetForm = () => {
    setForm({ name: "", marque: "", quantity: "", unit_price: "" });
    setEditingId(null);
  };

  // ‚úÖ Pagination logic
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = filteredParts.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(filteredParts.length / itemsPerPage);

  return (
    <div className="parts-container">
      <h2>üöó ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà</h2>

      {/* üîç ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ */}
      <div className="search-box">
        <input
          type="text"
          placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà / ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ / ‡∏£‡∏´‡∏±‡∏™..."
          value={searchTerm}
          onChange={handleSearch}
        />
      </div>

      {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° / ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç */}
      <form onSubmit={handleSubmit} className="parts-form">
        <input
          name="name"
          placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà"
          value={form.name}
          onChange={handleChange}
          required
        />
        <input
          name="marque"
          placeholder="‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠"
          value={form.marque}
          onChange={handleChange}
          required
        />
        <input
          name="quantity"
          type="number"
          placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"
          value={form.quantity}
          onChange={handleChange}
          required
        />
        <input
          name="unit_price"
          type="number"
          step="0.01"
          placeholder="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ö‡∏≤‡∏ó)"
          value={form.unit_price}
          onChange={handleChange}
          required
        />

        <button type="submit" className="btn-save">
          {editingId ? "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" : "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà"}
        </button>

        {editingId && (
          <button type="button" className="btn-cancel" onClick={resetForm}>
            ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </button>
        )}
      </form>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà */}
      <table className="parts-table">
        <thead>
          <tr>
            <th>‡∏£‡∏´‡∏±‡∏™</th>
            <th>‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà</th>
            <th>‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠</th>
            <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
            <th>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢</th>
            <th>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
          </tr>
        </thead>
        <tbody>
          {currentItems.length > 0 ? (
            currentItems.map((part) => (
              <tr key={part.part_id}>
                <td>{part.part_id}</td>
                <td>{part.name}</td>
                <td>{part.marque}</td>
                <td>{part.quantity}</td>
                <td>{Number(part.unit_price).toLocaleString()} ‡∏ø</td>
                <td>
                  <button className="edit-btn" onClick={() => handleEdit(part)}>
                    ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                  </button>
                  <button
                    className="delete-btn"
                    onClick={() => handleDelete(part.part_id)}
                  >
                    üóëÔ∏è ‡∏•‡∏ö
                  </button>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="6" style={{ textAlign: "center", padding: "12px" }}>
                ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
              </td>
            </tr>
          )}
        </tbody>
      </table>

      {/* üî¢ Pagination buttons */}
      <div className="pagination">
        <button
          onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
          disabled={currentPage === 1}
        >
          ‚¨ÖÔ∏è ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        </button>

        {Array.from({ length: totalPages }, (_, index) => (
          <button
            key={index + 1}
            className={currentPage === index + 1 ? "active-page" : ""}
            onClick={() => setCurrentPage(index + 1)}
          >
            {index + 1}
          </button>
        ))}

        <button
          onClick={() =>
            setCurrentPage((prev) => Math.min(prev + 1, totalPages))
          }
          disabled={currentPage === totalPages || totalPages === 0}
        >
          ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚û°Ô∏è
        </button>
      </div>
    </div>
  );
}

export default PartsManager;
