import "../styles/common.css";
import "../styles/table.css";
import "../styles/modal.css";
import { useEffect, useMemo, useState } from "react";
import { api } from "../api";
import Swal from "sweetalert2";

export default function AdminCustomers() {
  const [customers, setCustomers] = useState([]);
  const [keyword, setKeyword] = useState("");
  const [loading, setLoading] = useState(false);

  // pagination
  const [page, setPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);

  // form state
  const [open, setOpen] = useState(false);
  const [editing, setEditing] = useState(null);
  const [form, setForm] = useState({
    name: "",
    email: "",
    phone: "",
    address: "",
  });

  // ban modal state
  const [banModal, setBanModal] = useState(false);
  const [banTarget, setBanTarget] = useState(null);
  const [banReason, setBanReason] = useState("");

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
  const fetchCustomers = async () => {
    setLoading(true);
    try {
      const data = await api("/api/customers");
      setCustomers(data.customers || []);
    } catch (err) {
      Swal.fire("‚ùå", "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "error");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCustomers();
  }, []);

  // ‚úÖ ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const filtered = useMemo(() => {
    const q = keyword.trim().toLowerCase();
    if (!q) return customers;
    return customers.filter((c) =>
      [c.name, c.email, c.phone, c.address, c.reason]
        .filter(Boolean)
        .some((f) => String(f).toLowerCase().includes(q))
    );
  }, [customers, keyword]);

  const totalPages = Math.ceil(filtered.length / pageSize);
  const paginated = filtered.slice((page - 1) * pageSize, page * pageSize);

  const openCreate = () => {
    setEditing(null);
    setForm({ name: "", email: "", phone: "", address: "" });
    setOpen(true);
  };

  const openEdit = (row) => {
    setEditing(row);
    setForm({
      name: row.name || "",
      email: row.email || "",
      phone: row.phone || "",
      address: row.address || "",
    });
    setOpen(true);
  };

  const onChange = (e) =>
    setForm((p) => ({ ...p, [e.target.name]: e.target.value }));

  const onSubmit = async (e) => {
    e.preventDefault();
    try {
      if (editing) {
        await api(`/api/customers/${editing.user_id}`, {
          method: "PUT",
          body: { ...form },
        });
      } else {
        await api("/api/customers", {
          method: "POST",
          body: {
            ...form,
            password: "Temp@12345",
            roleid: "r2",
          },
        });
      }
      setOpen(false);
      fetchCustomers();
    } catch (err) {
      Swal.fire("‚ùå", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: " + err.message, "error");
    }
  };

  // ‚úÖ ‡∏•‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
  const onDelete = async (row) => {
    const result = await Swal.fire({
      title: `‡∏•‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ "${row.name}" ?`,
      text: "‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "‡πÉ‡∏ä‡πà, ‡∏•‡∏ö‡πÄ‡∏•‡∏¢",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    });

    if (!result.isConfirmed) return;

    try {
      await api(`/api/customers/${row.user_id}`, { method: "DELETE" });
      fetchCustomers();
      Swal.fire("‚úÖ", "‡∏•‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success");
    } catch (err) {
      Swal.fire("‚ùå", "‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + err.message, "error");
    }
  };

  // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î modal ‡πÅ‡∏ö‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
  const openBan = (row) => {
    setBanTarget(row);
    setBanReason("");
    setBanModal(true);
  };

  // ‚úÖ ‡πÅ‡∏ö‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
  const confirmBan = async () => {
    if (!banReason.trim()) {
      Swal.fire("‚ö†Ô∏è", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ô", "warning");
      return;
    }

    try {
      await api(`/api/customers/${banTarget.user_id}/ban`, {
        method: "PUT",
        body: { reason: banReason },
      });
      Swal.fire("‚úÖ", `‡πÅ‡∏ö‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ${banTarget.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, "success");
      setBanModal(false);
      fetchCustomers();
    } catch (err) {
      Swal.fire("‚ùå", "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ô", "error");
    }
  };

  // ‚úÖ ‡∏õ‡∏•‡∏î‡πÅ‡∏ö‡∏ô
  const unban = async (row) => {
    const res = await Swal.fire({
      title: `‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏õ‡∏•‡∏î‡πÅ‡∏ö‡∏ô ${row.name}?`,
      icon: "question",
      showCancelButton: true,
      confirmButtonText: "‡∏õ‡∏•‡∏î‡πÅ‡∏ö‡∏ô",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    });
    if (!res.isConfirmed) return;

    try {
      await api(`/api/customers/${row.user_id}/ban`, {
        method: "PUT",
        body: { reason: null },
      });
      Swal.fire("‚úÖ", "‡∏õ‡∏•‡∏î‡πÅ‡∏ö‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", "success");
      fetchCustomers();
    } catch {
      Swal.fire("‚ùå", "‡∏õ‡∏•‡∏î‡πÅ‡∏ö‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "error");
    }
  };

  return (
    <div className="page-container" style={{ maxWidth: 1400, margin: "24px auto", padding: "0 16px" }}>
      <h1 className="page-title" style={{ marginBottom: 12 }}>
        üë§ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
      </h1>

      <div className="card-wide">
        {/* Search + Action */}
        <div style={{ display: "flex", gap: 12, alignItems: "center", marginBottom: 12, flexWrap: "wrap" }}>
          <input
            className="input"
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏ä‡∏∑‡πà‡∏≠ / ‡∏≠‡∏µ‡πÄ‡∏°‡∏• / ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ / ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà / ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÅ‡∏ö‡∏ô"
            value={keyword}
            onChange={(e) => {
              setKeyword(e.target.value);
              setPage(1);
            }}
            style={{ maxWidth: 420 }}
          />
          <button className="btn-outline" onClick={fetchCustomers} disabled={loading}>
            {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î..." : "‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä"}
          </button>
          <button className="btn-primary" onClick={openCreate}>+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</button>
        </div>

        {/* Table */}
        <div style={{ overflowX: "auto" }}>
          <table className="table">
            <thead>
              <tr>
                <th>ID</th>
                <th>‡∏ä‡∏∑‡πà‡∏≠</th>
                <th>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</th>
                <th>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</th>
                <th>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</th>
                <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ô</th>
                <th>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÅ‡∏ö‡∏ô</th>
                <th style={{ width: 200 }}>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
              </tr>
            </thead>
            <tbody>
              {paginated.length === 0 ? (
                <tr>
                  <td colSpan="9" style={{ padding: 16, color: "var(--muted)" }}>
                    ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                  </td>
                </tr>
              ) : (
                paginated.map((c) => (
                  <tr key={c.user_id}>
                    <td>{c.user_id}</td>
                    <td>{c.name}</td>
                    <td>{c.email}</td>
                    <td>{c.phone || "-"}</td>
                    <td>{c.address || "-"}</td>
                    <td>
                      {c.reason ? (
                        <span style={{ color: "#dc2626", fontWeight: 600 }}>‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô</span>
                      ) : (
                        <span style={{ color: "#16a34a" }}>‡∏õ‡∏Å‡∏ï‡∏¥</span>
                      )}
                    </td>
                    <td>{c.blacklisted_date ? new Date(c.blacklisted_date).toLocaleDateString() : "-"}</td>
                    <td>{c.reason || "-"}</td>
                    <td>
                      <button className="btn-outline" onClick={() => openEdit(c)} style={{ marginRight: 6 }}>
                        ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                      </button>
                      <button className="btn-outline" onClick={() => onDelete(c)} style={{ marginRight: 6 }}>
                        ‡∏•‡∏ö
                      </button>
                      {c.reason ? (
                        <button
                          className="btn-outline"
                          style={{ color: "#16a34a", borderColor: "#16a34a" }}
                          onClick={() => unban(c)}
                        >
                          ‡∏õ‡∏•‡∏î‡πÅ‡∏ö‡∏ô
                        </button>
                      ) : (
                        <button
                          className="btn-outline"
                          style={{ color: "#dc2626", borderColor: "#dc2626" }}
                          onClick={() => openBan(c)}
                        >
                          ‡πÅ‡∏ö‡∏ô
                        </button>
                      )}
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>

      {/* Modal ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ */}
      {open && (
        <div className="modal-backdrop" onClick={() => setOpen(false)}>
          <div className="modal-card" onClick={(e) => e.stopPropagation()}>
            <h3>{editing ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"}</h3>
            <form onSubmit={onSubmit}>
              <div className="label">‡∏ä‡∏∑‡πà‡∏≠</div>
              <input className="input" name="name" value={form.name} onChange={onChange} required />
              <div className="label">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</div>
              <input className="input" name="email" type="email" value={form.email} onChange={onChange} required />
              <div className="label">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</div>
              <input className="input" name="phone" value={form.phone} onChange={onChange} />
              <div className="label">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</div>
              <input className="input" name="address" value={form.address} onChange={onChange} />
              <div style={{ display: "flex", gap: 10, marginTop: 16 }}>
                <button className="btn-primary" type="submit">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                <button type="button" className="btn-outline" onClick={() => setOpen(false)}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Modal ‡πÅ‡∏ö‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ */}
      {banModal && (
        <div className="modal-backdrop" onClick={() => setBanModal(false)}>
          <div className="modal-card" onClick={(e) => e.stopPropagation()}>
            <h3>üö´ ‡πÅ‡∏ö‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ {banTarget?.name}</h3>
            <p style={{ color: "gray", marginTop: 6 }}>
              ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°, ‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞, ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡πá‡∏à ‡∏Ø‡∏•‡∏Ø
            </p>
            <textarea
              className="input"
              rows="3"
              value={banReason}
              onChange={(e) => setBanReason(e.target.value)}
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•..."
              style={{ resize: "none", marginTop: 10 }}
            ></textarea>
            <div style={{ display: "flex", gap: 10, marginTop: 16 }}>
              <button className="btn-primary" onClick={confirmBan}>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏ö‡∏ô</button>
              <button className="btn-outline" onClick={() => setBanModal(false)}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
