import { useEffect, useState } from "react";
import { api } from "../api";
import Swal from "sweetalert2";
import "../styles/AdminRepairManager.css";

export default function AdminRepairManager() {
  const [bookings, setBookings] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [selected, setSelected] = useState(null);
  const [repairItems, setRepairItems] = useState([]);
  const [parts, setParts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [search, setSearch] = useState("");
  const [status, setStatus] = useState("all");

  useEffect(() => {
    fetchBookings();
  }, []);

  const fetchBookings = async () => {
    try {
      const data = await api("/api/bookings");
      if (data.success) {
        setBookings(data.bookings);
        setFiltered(data.bookings);
      }
    } catch {
      Swal.fire("‚ùå", "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "error");
    } finally {
      setLoading(false);
    }
  };

  // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á booking
  const fetchRepairItems = async (booking_id) => {
    try {
      const res = await api(`/api/repair-items/${booking_id}`);
      if (res.success) setRepairItems(res.items);
    } catch {
      setRepairItems([]);
    }
  };

  // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á
  const fetchParts = async () => {
    try {
      const res = await api("/api/parts");
      if (res.success) setParts(res.parts);
    } catch {
      setParts([]);
    }
  };

  // ‡πÄ‡∏õ‡∏¥‡∏î popup ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
  const openDetail = async (b) => {
    setSelected(b);
    await Promise.all([fetchRepairItems(b.booking_id), fetchParts()]);
  };

  const getStatus = (id) => {
    switch (id) {
      case 1: return { text: "‚è≥ ‡∏£‡∏≠‡∏ä‡πà‡∏≤‡∏á", class: "pending" };
      case 2: return { text: "üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡πà‡∏≠‡∏°", class: "progress" };
      case 5: return { text: "üí∞ ‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", class: "waiting" };
      case 3: return { text: "‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß", class: "done" };
      case 4: return { text: "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", class: "cancel" };
      default: return { text: "-", class: "" };
    }
  };

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡πÉ‡∏´‡∏°‡πà
  const addRepairItem = async (e) => {
    e.preventDefault();
    const form = e.target;
    const part_id = form.part_id.value;
    const qty = Number(form.quantity.value);

    if (!part_id || !qty) return;

    const part = parts.find((p) => p.part_id === part_id);
    if (!part) return Swal.fire("‚ö†Ô∏è", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà", "warning");

    const res = await api("/api/repair-items", {
      method: "POST",
      body: JSON.stringify({
        booking_id: selected.booking_id,
        part_id,
        quantity: qty,
        unit_price: part.unit_price,
      }),
    });

    if (res.success) {
      Swal.fire("‚úÖ", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "success");
      fetchRepairItems(selected.booking_id);
      form.reset();
    } else {
      Swal.fire("‚ùå", res.message || "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "error");
    }
  };

  // ‡∏•‡∏ö‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
  const deleteItem = async (part_id) => {
    const res = await api(
      `/api/repair-items/${selected.booking_id}/${part_id}`,
      { method: "DELETE" }
    );
    if (res.success) {
      Swal.fire("üóëÔ∏è", "‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "success");
      fetchRepairItems(selected.booking_id);
    } else {
      Swal.fire("‚ùå", res.message, "error");
    }
  };

  // ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå
  useEffect(() => {
    let data = bookings;

    if (search) {
      data = data.filter(
        (b) =>
          b.license_plate?.toLowerCase().includes(search.toLowerCase()) ||
          b.model?.toLowerCase().includes(search.toLowerCase()) ||
          b.owner_name?.toLowerCase().includes(search.toLowerCase())
      );
    }

    if (status !== "all") {
      data = data.filter((b) => String(b.status_id) === String(status));
    }

    setFiltered(data);
  }, [search, status, bookings]);

  if (loading) return <div className="loading">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>;

  return (
    <div className="user-page">
      <h2 className="user-title">üß∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏° (Admin)</h2>

      {/* üîç Filter bar */}
      <div className="filter-bar">
        <input
          type="text"
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏ä‡∏∑‡πà‡∏≠ / ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô / ‡∏£‡∏∏‡πà‡∏ô)"
          value={search}
          onChange={(e) => setSearch(e.target.value)}
        />
        <select value={status} onChange={(e) => setStatus(e.target.value)}>
          <option value="all">‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</option>
          <option value="1">‡∏£‡∏≠‡∏ä‡πà‡∏≤‡∏á</option>
          <option value="2">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡πà‡∏≠‡∏°</option>
          <option value="5">‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</option>
          <option value="3">‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</option>
          <option value="4">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</option>
        </select>
        <button className="btn btn-primary" onClick={fetchBookings}>
          üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
        </button>
      </div>

      {/* üßæ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á */}
      <table className="user-table">
        <thead>
          <tr>
            <th>‡∏£‡∏´‡∏±‡∏™</th>
            <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
            <th>‡πÄ‡∏ß‡∏•‡∏≤</th>
            <th>‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ</th>
            <th>‡∏£‡∏ñ</th>
            <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
            <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
            <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
          </tr>
        </thead>
        <tbody>
          {filtered.length === 0 ? (
            <tr>
              <td colSpan="8" style={{ textAlign: "center", padding: "20px" }}>
                ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
              </td>
            </tr>
          ) : (
            filtered.map((b) => {
              const s = getStatus(b.status_id);
              return (
                <tr key={b.booking_id}>
                  <td>{b.booking_id}</td>
                  <td>{new Date(b.date).toLocaleDateString("th-TH")}</td>
                  <td>{b.time}</td>
                  <td>{b.owner_name}</td>
                  <td>
                    {b.license_plate} ({b.model})
                  </td>
                  <td>{b.description || "-"}</td>
                  <td>
                    <span className={`status-badge ${s.class}`}>{s.text}</span>
                  </td>
                  <td>
                    <button
                      className="btn btn-detail"
                      onClick={() => openDetail(b)}
                    >
                      üßæ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                    </button>
                  </td>
                </tr>
              );
            })
          )}
        </tbody>
      </table>

      {/* ü™ü Popup */}
      {selected && (
        <div className="popup-overlay" onClick={() => setSelected(null)}>
          <div className="popup-card" onClick={(e) => e.stopPropagation()}>
            <h3 className="popup-title">üßæ ‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏° #{selected.booking_id}</h3>
            <div className="info-grid">
              <p><b>‡∏£‡∏ñ:</b> {selected.model} ({selected.license_plate})</p>
              <p><b>‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á:</b> {selected.owner_name}</p>
              <p><b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</b> {new Date(selected.date).toLocaleDateString("th-TH")}</p>
              <p><b>‡πÄ‡∏ß‡∏•‡∏≤:</b> {selected.time}</p>
              <p><b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> {getStatus(selected.status_id).text}</p>
              <p><b>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</b> {selected.description || "-"}</p>
            </div>

            {/* üîß ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà */}
            <h4>üî© ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà</h4>
            <table className="small-table">
              <thead>
                <tr>
                  <th>‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</th>
                  <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
                  <th>‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢</th>
                  <th>‡∏£‡∏ß‡∏°</th>
                  <th></th>
                </tr>
              </thead>
              <tbody>
                {repairItems.length === 0 ? (
                  <tr><td colSpan="5" style={{ textAlign: "center" }}>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</td></tr>
                ) : (
                  repairItems.map((i) => (
                    <tr key={i.part_id}>
                      <td>{i.partname}</td>
                      <td>{i.quantity}</td>
                      <td>{Number(i.unit_price).toLocaleString()} ‡∏ø</td>
                      <td>{(i.unit_price * i.quantity).toLocaleString()} ‡∏ø</td>
                      <td>
                        {selected.status_id === 2 && (
                          <button className="btn btn-cancel" onClick={() => deleteItem(i.part_id)}>üóë</button>
                        )}
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>

            {/* ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡πÉ‡∏´‡∏°‡πà */}
            {selected.status_id === 2 && (
              <form className="add-form" onSubmit={addRepairItem}>
                <h4>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà</h4>
                <div className="add-row">
                  <select name="part_id" required>
                    <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà</option>
                    {parts.map((p) => (
                      <option key={p.part_id} value={p.part_id}>
                        {p.name} ({p.marque}) ‚Äî {p.unit_price}‡∏ø
                      </option>
                    ))}
                  </select>
                  <input type="number" name="quantity" min="1" placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô" required />
                  <button className="btn btn-primary">‡πÄ‡∏û‡∏¥‡πà‡∏°</button>
                </div>
              </form>
            )}

            <div className="popup-actions">
              <button className="btn btn-secondary" onClick={() => setSelected(null)}>
                ‡∏õ‡∏¥‡∏î
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
