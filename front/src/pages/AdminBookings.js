import { useEffect, useState } from "react";
import { api } from "../api";
import Swal from "sweetalert2";
import jsPDF from "jspdf";
import "jspdf-autotable";
import "../font/Sarabun-Regular-normal.js";
import "../font/Sarabun-ExtraBold-normal.js";
import "../styles/AdminRepairManager.css";

export default function AdminRepairManager() {
  const [bookings, setBookings] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [selected, setSelected] = useState(null);
  const [repairItems, setRepairItems] = useState([]);
  const [parts, setParts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [search, setSearch] = useState("");
  const [status, setStatus] = useState("all");

  useEffect(() => {
    fetchBookings();
  }, []);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const fetchBookings = async () => {
    try {
      const res = await api("/api/bookings");
      if (res.success) {
        setBookings(res.bookings);
        setFiltered(res.bookings);
      }
    } catch {
      Swal.fire("‚ùå", "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "error");
    } finally {
      setLoading(false);
    }
  };

  const fetchRepairItems = async (id) => {
    try {
      const res = await api(`/api/repair-items/${id}`);
      if (res.success) setRepairItems(res.items);
    } catch {
      setRepairItems([]);
    }
  };

  const fetchParts = async () => {
    try {
      const res = await api("/api/parts");
      if (res.success) setParts(res.parts);
    } catch {
      setParts([]);
    }
  };

  const getStatus = (id) => {
    switch (id) {
      case 1: return { text: "‚è≥ ‡∏£‡∏≠‡∏ä‡πà‡∏≤‡∏á", class: "pending" };
      case 2: return { text: "üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡πà‡∏≠‡∏°", class: "progress" };
      case 5: return { text: "üí∞ ‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", class: "waiting" };
      case 3: return { text: "‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß", class: "done" };
      case 4: return { text: "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", class: "cancel" };
      default: return { text: "-", class: "" };
    }
  };

  // ‡πÄ‡∏õ‡∏¥‡∏î popup
  const openDetail = async (b) => {
    setSelected(b);
    await Promise.all([fetchRepairItems(b.booking_id), fetchParts()]);
  };

  const closePopup = () => {
    setSelected(null);
    setRepairItems([]);
  };

  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô
  const updateStatus = async (e) => {
    const newStatus = Number(e.target.value);
    try {
      const res = await api(`/api/bookings/${selected.booking_id}`, {
        method: "PUT",
        body: { status_id: newStatus },
      });
      if (res.success) {
        Swal.fire("‚úÖ", "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "success");
        fetchBookings();
        setSelected({ ...selected, status_id: newStatus });
      }
    } catch {
      Swal.fire("‚ùå", "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "error");
    }
  };

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
  const addRepairItem = async (e) => {
    e.preventDefault();
    const form = e.target;
    const part_id = form.part_id.value;
    const qty = Number(form.quantity.value);

    const part = parts.find((p) => p.part_id === part_id);
    if (!part) return Swal.fire("‚ö†Ô∏è", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà", "warning");

    const res = await api("/api/repair-items", {
      method: "POST",
      body: {
        booking_id: selected.booking_id,
        part_id,
        quantity: qty,
        unit_price: part.unit_price,
      },
    });

    if (res.success) {
      Swal.fire("‚úÖ", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "success");
      fetchRepairItems(selected.booking_id);
      form.reset();
    } else {
      Swal.fire("‚ùå", res.message || "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "error");
    }
  };

  // ‡∏•‡∏ö‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
  const deleteItem = async (part_id) => {
    const res = await api(`/api/repair-items/${selected.booking_id}/${part_id}`, { method: "DELETE" });
    if (res.success) {
      Swal.fire("üóëÔ∏è", "‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "success");
      fetchRepairItems(selected.booking_id);
    } else {
      Swal.fire("‚ùå", res.message, "error");
    }
  };

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á/‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á‡∏£‡∏ñ
  const updateCost = async () => {
    try {
      const res = await api(`/api/bookings/${selected.booking_id}`, {
        method: "PUT",
        body: {
          service: Number(selected.service || 0),
          freight: selected.transport_required ? Number(selected.freight || 0) : 0,
        },
      });
      if (res.success) {
        Swal.fire("‚úÖ", "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "success");
        fetchBookings();
      }
    } catch {
      Swal.fire("‚ùå", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ", "error");
    }
  };

  // ‡∏û‡∏¥‡∏°‡∏û‡πå PDF
  const printPDF = () => {
    const doc = new jsPDF();
    doc.setFont("Sarabun-Regular");
    doc.text("‡πÉ‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡∏£‡∏ñ", 14, 15);
    doc.text(`‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô: ${selected.booking_id}`, 14, 25);
    doc.text(`‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ: ${selected.owner_name}`, 14, 32);
    doc.text(`‡∏£‡∏ñ: ${selected.model} (${selected.license_plate})`, 14, 39);

    const rows = repairItems.map((i, idx) => [
      idx + 1,
      i.partname,
      i.quantity,
      `${i.unit_price.toLocaleString()} ‡∏ø`,
      `${(i.unit_price * i.quantity).toLocaleString()} ‡∏ø`,
    ]);

    doc.autoTable({
      head: [["#", "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", "‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢", "‡∏£‡∏ß‡∏°"]],
      body: rows,
      startY: 50,
    });

    const total = repairItems.reduce((sum, i) => sum + i.unit_price * i.quantity, 0);
    const service = Number(selected.service || 0);
    const freight = selected.transport_required ? Number(selected.freight || 0) : 0;
    const totalAll = total + service + freight;

    let y = doc.lastAutoTable.finalY + 10;
    doc.text(`‡∏Ñ‡πà‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà: ${total.toLocaleString()} ‡∏ø`, 14, y);
    y += 6;
    doc.text(`‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á: ${service.toLocaleString()} ‡∏ø`, 14, y);
    y += 6;
    if (selected.transport_required) {
      doc.text(`‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á‡∏£‡∏ñ: ${freight.toLocaleString()} ‡∏ø`, 14, y);
      y += 6;
    }
    doc.text(`‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalAll.toLocaleString()} ‡∏ø`, 14, y + 5);

    doc.save(`Repair_${selected.booking_id}.pdf`);
  };

  // ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå
  useEffect(() => {
    let data = bookings;
    if (search)
      data = data.filter(
        (b) =>
          b.license_plate?.toLowerCase().includes(search.toLowerCase()) ||
          b.model?.toLowerCase().includes(search.toLowerCase()) ||
          b.owner_name?.toLowerCase().includes(search.toLowerCase())
      );
    if (status !== "all")
      data = data.filter((b) => String(b.status_id) === String(status));
    setFiltered(data);
  }, [search, status, bookings]);

  if (loading) return <div className="loading">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>;

  const totalParts = repairItems.reduce(
    (sum, i) => sum + Number(i.unit_price) * Number(i.quantity),
    0
  );

  const service = Number(selected?.service || 0);
  const freight = selected?.transport_required ? Number(selected?.freight || 0) : 0;
  const totalAll = totalParts + service + freight;

  return (
    <div className="page-container">
      <h2 className="page-title">üß∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏° (Admin)</h2>

      <div className="filter-bar">
        <input
          type="text"
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏ä‡∏∑‡πà‡∏≠ / ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô / ‡∏£‡∏∏‡πà‡∏ô)"
          value={search}
          onChange={(e) => setSearch(e.target.value)}
        />
        <select value={status} onChange={(e) => setStatus(e.target.value)}>
          <option value="all">‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</option>
          <option value="1">‡∏£‡∏≠‡∏ä‡πà‡∏≤‡∏á</option>
          <option value="2">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡πà‡∏≠‡∏°</option>
          <option value="5">‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</option>
          <option value="3">‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</option>
          <option value="4">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</option>
        </select>
      </div>

      <table className="table">
        <thead>
          <tr>
            <th>‡∏£‡∏´‡∏±‡∏™</th>
            <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
            <th>‡πÄ‡∏ß‡∏•‡∏≤</th>
            <th>‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ</th>
            <th>‡∏£‡∏ñ</th>
            <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
            <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
            <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
          </tr>
        </thead>
        <tbody>
          {filtered.map((b) => {
            const s = getStatus(b.status_id);
            return (
              <tr key={b.booking_id}>
                <td>{b.booking_id}</td>
                <td>{new Date(b.date).toLocaleDateString("th-TH")}</td>
                <td>{b.time}</td>
                <td>{b.owner_name}</td>
                <td>{b.license_plate} ({b.model})</td>
                <td>{b.description || "-"}</td>
                <td><span className={`badge ${s.class}`}>{s.text}</span></td>
                <td>
                  <button className="btn btn-detail" onClick={() => openDetail(b)}>üßæ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</button>
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>

      {selected && (
        <div className="popup-overlay">
          <div className="popup-card">
            <h3>üßæ ‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏° #{selected.booking_id}</h3>
            <div className="info-grid">
              <p><b>üöó ‡∏£‡∏ñ:</b> {selected.model} ({selected.license_plate})</p>
              <p><b>üë§ ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á:</b> {selected.owner_name}</p>
              <p><b>üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</b> {new Date(selected.date).toLocaleDateString("th-TH")}</p>
              <p><b>üïì ‡πÄ‡∏ß‡∏•‡∏≤:</b> {selected.time}</p>
              <p><b>üí¨ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</b> {selected.description || "-"}</p>
            </div>

            <div className="status-change">
              <label>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: </label>
              <select value={selected.status_id} onChange={updateStatus}>
                <option value={1}>‚è≥ ‡∏£‡∏≠‡∏ä‡πà‡∏≤‡∏á</option>
                <option value={2}>üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡πà‡∏≠‡∏°</option>
                <option value={5}>üí∞ ‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</option>
                <option value={3}>‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</option>
                <option value={4}>‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</option>
              </select>
            </div>

            <h4>üî© ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà</h4>
            <table className="small-table">
              <thead>
                <tr>
                  <th>‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</th>
                  <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
                  <th>‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢</th>
                  <th>‡∏£‡∏ß‡∏°</th>
                  <th></th>
                </tr>
              </thead>
              <tbody>
                {repairItems.map((i) => (
                  <tr key={i.part_id}>
                    <td>{i.partname}</td>
                    <td>{i.quantity}</td>
                    <td>{Number(i.unit_price).toLocaleString()} ‡∏ø</td>
                    <td>{(i.unit_price * i.quantity).toLocaleString()} ‡∏ø</td>
                    <td><button className="btn btn-cancel" onClick={() => deleteItem(i.part_id)}>üóëÔ∏è</button></td>
                  </tr>
                ))}
              </tbody>
            </table>

            <form className="add-form" onSubmit={addRepairItem}>
              <select name="part_id" required>
                <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà</option>
                {parts.map((p) => (
                  <option key={p.part_id} value={p.part_id}>
                    {p.name} ({p.marque}) ‚Äî {p.unit_price}‡∏ø
                  </option>
                ))}
              </select>
              <input type="number" name="quantity" min="1" placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô" required />
              <button className="btn btn-primary">‡πÄ‡∏û‡∏¥‡πà‡∏°</button>
            </form>

            <div className="cost-edit">
              <label>üß∞ ‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á: </label>
              <input type="number" value={selected.service || 0} onChange={(e) => setSelected({ ...selected, service: e.target.value })} />
              {selected.transport_required && (
                <>
                  <label>üöó ‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á‡∏£‡∏ñ: </label>
                  <input type="number" value={selected.freight || 0} onChange={(e) => setSelected({ ...selected, freight: e.target.value })} />
                </>
              )}
              <button className="btn btn-primary" onClick={updateCost}>üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
            </div>

            <div className="total-section">
              <p>‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà: {totalParts.toLocaleString()} ‡∏ø</p>
              <p>‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á: {service.toLocaleString()} ‡∏ø</p>
              {selected.transport_required && <p>‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á: {freight.toLocaleString()} ‡∏ø</p>}
              <hr />
              <b>‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {totalAll.toLocaleString()} ‡∏ø</b>
            </div>

            <button className="btn btn-print" onClick={printPDF}>üñ®Ô∏è ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡∏ã‡πà‡∏≠‡∏°</button>
            <button className="btn btn-secondary" onClick={closePopup}>‡∏õ‡∏¥‡∏î</button>
          </div>
        </div>
      )}
    </div>
  );
}
