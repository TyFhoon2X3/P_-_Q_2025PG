import { useEffect, useState } from "react";
import { api } from "../api";
import Swal from "sweetalert2";
import "../styles/TableForBook.css";
import jsPDF from "jspdf";
import "jspdf-autotable";
import "../font/Sarabun-ExtraBold-normal.js";
import "../font/Sarabun-Regular-normal.js";

export default function AdminRepairManager() {
  const [bookings, setBookings] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [parts, setParts] = useState([]);
  const [repairItems, setRepairItems] = useState([]);
  const [selectedBooking, setSelectedBooking] = useState(null);
  const [bookingDetail, setBookingDetail] = useState(null);
  const [currentStatus, setCurrentStatus] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [loading, setLoading] = useState(true);
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");

  useEffect(() => {
    fetchBookings();
    fetchParts();
  }, []);

  const fetchBookings = async () => {
    try {
      const data = await api("/api/bookings");
      if (data.success) {
        setBookings(data.bookings || []);
        setFiltered(data.bookings || []);
      }
    } catch {
      Swal.fire("‚ùå", "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "error");
    } finally {
      setLoading(false);
    }
  };

  const fetchParts = async () => {
    try {
      const data = await api("/api/parts");
      if (data.success) setParts(data.parts || []);
    } catch {
      Swal.fire("‚ùå", "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "error");
    }
  };

  const getStatus = (id) => {
    switch (id) {
      case 1: return { text: "‚è≥ ‡∏£‡∏≠‡∏ä‡πà‡∏≤‡∏á", class: "pending" };
      case 2: return { text: "üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡πà‡∏≠‡∏°", class: "progress" };
      case 5: return { text: "üí∞ ‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", class: "waiting" };
      case 3: return { text: "‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß", class: "done" };
      case 4: return { text: "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", class: "cancel" };
      default: return { text: "‚ùî ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö", class: "unknown" };
    }
  };


  // ‚úÖ ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  useEffect(() => {
    let filteredData = bookings;

    if (searchTerm) {
      filteredData = filteredData.filter(
        (b) =>
          b.license_plate?.toLowerCase().includes(searchTerm.toLowerCase()) ||
          b.model?.toLowerCase().includes(searchTerm.toLowerCase()) ||
          b.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||
          b.owner_name?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (statusFilter !== "all") {
      filteredData = filteredData.filter(
        (b) => String(b.status_id) === String(statusFilter)
      );
    }

    if (startDate && endDate) {
      filteredData = filteredData.filter((b) => {
        const d = new Date(b.date);
        return d >= new Date(startDate) && d <= new Date(endDate);
      });
    }

    setFiltered(filteredData);
  }, [searchTerm, statusFilter, startDate, endDate, bookings]);

  // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î popup
  const openPopup = async (booking_id, status_id) => {
    setSelectedBooking(booking_id);
    setCurrentStatus(status_id);
    try {
      const [repairRes, detailRes] = await Promise.all([
        api(`/api/repair-items/${booking_id}`),
        api(`/api/bookings/${booking_id}`)
      ]);
      if (repairRes.success) setRepairItems(repairRes.items || []);
      if (detailRes.success) setBookingDetail(detailRes.booking);
    } catch {
      Swal.fire("‚ùå", "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "error");
    }
  };

  const closePopup = () => {
    setSelectedBooking(null);
    setRepairItems([]);
    setBookingDetail(null);
  };

  // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const updateStatus = async (e) => {
    const newStatus = Number(e.target.value);
    try {
      const res = await api(`/api/bookings/${selectedBooking}`, {
        method: "PUT",
        body: { status_id: newStatus },
      });
      if (res.success) {
        setCurrentStatus(newStatus);
        Swal.fire("‚úÖ", "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "success");
        fetchBookings();
      }
    } catch {
      Swal.fire("‚ùå", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ", "error");
    }
  };

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
  const addRepairItem = async (e) => {
    e.preventDefault();
    if (currentStatus === 3 || currentStatus === 4) {
      Swal.fire("‚ö†Ô∏è", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ", "warning");
      return;
    }
    const form = e.target;
    const part_id = form.part_id.value;
    const quantity = Number(form.quantity.value);
    const part = parts.find((p) => p.part_id === part_id);

    if (!part) return Swal.fire("‚ùå", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", "error");

    try {
      const res = await api("/api/repair-items", {
        method: "POST",
        body: {
          booking_id: selectedBooking,
          part_id,
          quantity,
          unit_price: Number(part.unit_price),
        },
      });

      if (res.success) {
        Swal.fire("‚úÖ", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "success");
        form.reset();
        openPopup(selectedBooking, currentStatus);
      } else {
        Swal.fire("‚ùå", res.message || "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "error");
      }
    } catch {
      Swal.fire("‚ùå", "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "error");
    }
  };

  // ‚úÖ ‡∏•‡∏ö‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
  const deleteItem = async (part_id) => {
    if (currentStatus === 3 || currentStatus === 4) {
      Swal.fire("‚ö†Ô∏è", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ", "warning");
      return;
    }

    const result = await Swal.fire({
      title: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "‡∏•‡∏ö‡πÄ‡∏•‡∏¢",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    });
    if (!result.isConfirmed) return;

    await api(`/api/repair-items/${selectedBooking}/${part_id}`, { method: "DELETE" });
    Swal.fire("‚úÖ", "‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "success");
    openPopup(selectedBooking, currentStatus);
  };

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á / ‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á
  const updateCost = async () => {
    if (currentStatus === 3 || currentStatus === 4)
      return Swal.fire("‚ö†Ô∏è", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ", "warning");

    try {
      const res = await api(`/api/bookings/${selectedBooking}`, {
        method: "PUT",
        body: {
          service: Number(bookingDetail.service),
          freight: bookingDetail.transport_required ? Number(bookingDetail.freight) : 0,
        },
      });
      if (res.success) {
        Swal.fire("‚úÖ", "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "success");
        fetchBookings();
      }
    } catch {
      Swal.fire("‚ùå", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ", "error");
    }
  };

  // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°
  const totalParts = repairItems.reduce(
    (sum, i) => sum + Number(i.unit_price) * Number(i.quantity),
    0
  );
  const service = Number(bookingDetail?.service || 0);
  const freight = bookingDetail?.transport_required ? Number(bookingDetail?.freight || 0) : 0;
  const grandTotal = totalParts + service + freight;

  // ‚úÖ ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à PDF (‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏•‡πÇ‡∏Å‡πâ)
  const printPDF = () => {
    if (!bookingDetail) return;
    const doc = new jsPDF({ orientation: "portrait", unit: "mm", format: "a4" });
    doc.setFont("Sarabun-Regular");

    // ‡∏´‡∏±‡∏ß‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©
    doc.setFontSize(16);
    doc.setFont("Sarabun-ExtraBold");
    doc.text("‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ã‡πà‡∏≠‡∏°‡∏£‡∏ñ / Repair Invoice", 70, 18);
    doc.line(14, 22, 196, 22);

    // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    doc.setFontSize(11);
    doc.setFont("Sarabun-Regular");
    const startY = 30;
    doc.text(`‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°: #${bookingDetail.booking_id}`, 14, startY);
    doc.text(`‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${new Date(bookingDetail.date).toLocaleDateString("th-TH")}`, 130, startY);
    doc.text(`‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ: ${bookingDetail.owner_name || "-"}`, 14, startY + 7);
    doc.text(`‡∏£‡∏∏‡πà‡∏ô‡∏£‡∏ñ: ${bookingDetail.model}`, 14, startY + 14);
    doc.text(`‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: ${bookingDetail.license_plate}`, 130, startY + 14);
    doc.text(`‡∏Ç‡∏ô‡∏™‡πà‡∏á: ${bookingDetail.transport_required ? "‡πÉ‡∏´‡πâ‡∏£‡πâ‡∏≤‡∏ô‡∏£‡∏±‡∏ö-‡∏™‡πà‡∏á‡∏£‡∏ñ" : "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏á"}`, 14, startY + 21);

    // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
    const tableData = repairItems.map((i, idx) => [
      idx + 1,
      i.partname,
      i.quantity,
      `${Number(i.unit_price).toLocaleString()} ‡∏ø`,
      `${(i.unit_price * i.quantity).toLocaleString()} ‡∏ø`,
    ]);

    doc.autoTable({
      head: [["#", "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", "‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢", "‡∏£‡∏ß‡∏°"]],
      body: tableData,
      startY: startY + 30,
      theme: "grid",
      headStyles: { fillColor: [41, 128, 185], textColor: 255 },
      styles: { font: "Sarabun-Regular", fontSize: 10 },
    });

    let finalY = doc.lastAutoTable.finalY + 8;
    doc.text(`‡∏Ñ‡πà‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà: ${totalParts.toLocaleString()} ‡∏ø`, 120, finalY);
    doc.text(`‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á: ${service.toLocaleString()} ‡∏ø`, 120, finalY + 6);
    if (bookingDetail.transport_required) {
      doc.text(`‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á‡∏£‡∏ñ: ${freight.toLocaleString()} ‡∏ø`, 120, finalY + 12);
      finalY += 6;
    }
    doc.setFont("Sarabun-ExtraBold");
    doc.text(`‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${grandTotal.toLocaleString()} ‡∏ø`, 120, finalY + 18);
    doc.line(14, finalY + 25, 196, finalY + 25);
    doc.setFont("Sarabun-Regular");
    doc.text("‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ä‡πà‡∏≤‡∏á‡∏ú‡∏π‡πâ‡∏ã‡πà‡∏≠‡∏° ____________________", 14, finalY + 40);
    doc.text("‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ _________________________", 120, finalY + 40);
    doc.save(`Invoice_${bookingDetail.booking_id}.pdf`);
  };

  if (loading) return <div className="loading">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>;

  return (
    <div className="page-container">
      <h1 className="page-title">üß∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏° (Admin)</h1>

      {/* ‚úÖ Filter Bar */}
      <div className="filter-bar">
        <input
          type="text"
          placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏ä‡∏∑‡πà‡∏≠ / ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô / ‡∏£‡∏∏‡πà‡∏ô)"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        <select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>
          <option value="all">‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</option>
          <option value="1">‚è≥ ‡∏£‡∏≠‡∏ä‡πà‡∏≤‡∏á</option>
          <option value="2">üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡πà‡∏≠‡∏°</option>
          <option value="5">üí∞ ‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</option>
          <option value="3">‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</option>
          <option value="4">‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</option>
        </select>

        <input type="date" value={startDate} onChange={(e) => setStartDate(e.target.value)} />
        <input type="date" value={endDate} onChange={(e) => setEndDate(e.target.value)} />
        <button className="btn btn-primary" onClick={fetchBookings}>üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä</button>
      </div>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å */}
      <div className="table-container wide">
        <table className="table big-table">
          <thead>
            <tr>
              <th>‡∏£‡∏´‡∏±‡∏™</th>
              <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
              <th>‡πÄ‡∏ß‡∏•‡∏≤</th>
              <th>‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ</th>
              <th>‡∏£‡∏ñ</th>
              <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
              <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
              <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
            </tr>
          </thead>
          <tbody>
            {filtered.map((b) => {
              const s = getStatus(b.status_id);
              return (
                <tr key={b.booking_id}>
                  <td>{b.booking_id}</td>
                  <td>{new Date(b.date).toLocaleDateString("th-TH")}</td>
                  <td>{b.time}</td>
                  <td>{b.owner_name || "‚Äî"}</td>
                  <td>{b.license_plate} ({b.model})</td>
                  <td>{b.description || "-"}</td>
                  <td><span className={`badge ${s.class}`}>{s.text}</span></td>
                  <td>
                    <button className="btn btn-detail" onClick={() => openPopup(b.booking_id, b.status_id)}>üßæ</button>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>

      {/* ‚úÖ Popup ‡∏Å‡∏∞‡∏ó‡∏±‡∏î‡∏£‡∏±‡∏î */}
      {selectedBooking && bookingDetail && (
        <div className="popup-overlay">
          <div className="popup-card compact">
            <h4 className="popup-title">üßæ ‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏° #{selectedBooking}</h4>

            <div className="info-grid">
              <div><b>üöó ‡∏£‡∏ñ:</b> {bookingDetail.model} ({bookingDetail.license_plate})</div>
              <div><b>üë§ ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á:</b> {bookingDetail.owner_name || "-"}</div>
              <div><b>üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</b> {new Date(bookingDetail.date).toLocaleDateString("th-TH")}</div>
              <div><b>üïì ‡πÄ‡∏ß‡∏•‡∏≤:</b> {bookingDetail.time}</div>
              <div><b>üí¨ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</b> {bookingDetail.description || "-"}</div>
              <div><b>üöö:</b> {bookingDetail.transport_required ? "‡∏£‡∏±‡∏ö-‡∏™‡πà‡∏á" : "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏á"}</div>
            </div>

            <div className="status-change">
              <label>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: </label>
              <select value={currentStatus} onChange={updateStatus}>
                <option value={1}>‚è≥ ‡∏£‡∏≠‡∏ä‡πà‡∏≤‡∏á</option>
                <option value={2}>üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡πà‡∏≠‡∏°</option>
                <option value={3}>‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</option>
                <option value={4}>‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</option>
                <option value={5}>üí∞ ‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</option>
              </select>
            </div>

            <table className="table small">
              <thead>
                <tr>
                  <th>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</th><th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th><th>‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢</th><th>‡∏£‡∏ß‡∏°</th><th></th>
                </tr>
              </thead>
              <tbody>
                {repairItems.map((i) => (
                  <tr key={i.part_id}>
                    <td>{i.partname}</td>
                    <td>{i.quantity}</td>
                    <td>{Number(i.unit_price).toLocaleString()} ‡∏ø</td>
                    <td>{(i.unit_price * i.quantity).toLocaleString()} ‡∏ø</td>
                    <td><button className="btn btn-cancel" onClick={() => deleteItem(i.part_id)}>üóë</button></td>
                  </tr>
                ))}
              </tbody>
            </table>

            {currentStatus !== 3 && currentStatus !== 4 && (
              <form onSubmit={addRepairItem} className="add-form">
                <select name="part_id" required>
                  <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</option>
                  {parts.map((p) => (
                    <option key={p.part_id} value={p.part_id}>
                      {p.name} ({p.marque}) ‚Äî {p.unit_price}‡∏ø
                    </option>
                  ))}
                </select>
                <input type="number" name="quantity" min="1" placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô" required />
                <button className="btn btn-primary">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°</button>
              </form>
            )}

            <div className="cost-summary">
              <label>üß∞ ‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á:</label>
              <input type="number" value={bookingDetail.service || 0}
                onChange={(e) => setBookingDetail({ ...bookingDetail, service: e.target.value })} />
              {bookingDetail.transport_required && (
                <>
                  <label>üöó ‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á:</label>
                  <input type="number" value={bookingDetail.freight || 0}
                    onChange={(e) => setBookingDetail({ ...bookingDetail, freight: e.target.value })} />
                </>
              )}
              <button className="btn btn-primary" onClick={updateCost}>üíæ</button>
            </div>

            <div className="total-mini">
              <p>‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà: {totalParts.toLocaleString()} ‡∏ø</p>
              <p>‡πÅ‡∏£‡∏á: {service.toLocaleString()} ‡∏ø</p>
              {bookingDetail.transport_required && <p>‡∏™‡πà‡∏á‡∏£‡∏ñ: {freight.toLocaleString()} ‡∏ø</p>}
              <b>üí∞ ‡∏£‡∏ß‡∏°: {grandTotal.toLocaleString()} ‡∏ø</b>
            </div>

            {/* ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö */}
            {bookingDetail.slipfilename && (
              <div className="slip-preview">
                <h4>üìÑ ‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</h4>
                <img
                  src={`http://localhost:3000/uploads/${bookingDetail.slipfilename}`}
                  alt="Slip"
                  className="slip-img"
                />
                <p style={{ fontSize: "0.9rem", color: "#555", marginTop: "0.4rem" }}>
                  üïì ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö: {new Date(bookingDetail.updated_at || bookingDetail.date).toLocaleString("th-TH")}
                </p>
                <a
                  href={`http://localhost:3000/uploads/${bookingDetail.slipfilename}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="btn btn-success"
                  style={{ marginTop: "0.6rem" }}
                >
                  üîç ‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ï‡πá‡∏°
                </a>
              </div>
            )}

            <div className="popup-actions">
              <button className="btn btn-print" onClick={printPDF}>üñ®Ô∏è ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à</button>
              <button className="btn btn-secondary" onClick={closePopup}>‡∏õ‡∏¥‡∏î</button>
            </div>

          </div>
        </div>
      )}
    </div>
  );
}
