import { useEffect, useState } from "react";
import { api } from "../api";
import Swal from "sweetalert2";
import QRCode from "qrcode";
import jsPDF from "jspdf";
import "jspdf-autotable";
import "../font/Sarabun-Regular-normal.js";
import "../styles/UserRepair.css";

export default function UserRepairStatus() {
  const [bookings, setBookings] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [selectedBooking, setSelectedBooking] = useState(null);
  const [repairItems, setRepairItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [slipFile, setSlipFile] = useState(null);

  // üîç ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");

  useEffect(() => {
    fetchBookings();
  }, []);

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• booking ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  const fetchBookings = async () => {
    try {
      const res = await api("/api/bookings/mine");
      if (res.success) {
        const sorted = res.bookings.sort((a, b) => b.booking_id - a.booking_id);
        setBookings(sorted);
        setFiltered(sorted);
      }
    } catch {
      Swal.fire("‚ùå", "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "error");
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏Ç‡∏≠‡∏á booking
  const fetchRepairItems = async (bookingId) => {
    try {
      const res = await api(`/api/repair-items/${bookingId}`);
      if (res.success) setRepairItems(res.items || []);
    } catch {
      setRepairItems([]);
    }
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const getStatus = (id) => {
    switch (Number(id)) {
      case 1: return { text: "‚è≥ ‡∏£‡∏≠‡∏ä‡πà‡∏≤‡∏á", class: "pending" };
      case 2: return { text: "üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡πà‡∏≠‡∏°", class: "progress" };
      case 5: return { text: "üí∞ ‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞", class: "waiting" };
      case 3: return { text: "‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß", class: "done" };
      case 4: return { text: "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", class: "cancel" };
      default: return { text: "-", class: "" };
    }
  };

  // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î popup ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  const openDetail = async (b) => {
    setSelectedBooking(b);
    await fetchRepairItems(b.booking_id);
  };

  const closePopup = () => {
    setSelectedBooking(null);
    setRepairItems([]);
  };

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ
  const uploadSlip = async (bookingId) => {
    if (!slipFile) return Swal.fire("‚ö†Ô∏è", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", "warning");
    const formData = new FormData();
    formData.append("slip", slipFile);

    try {
      const res = await api(`/api/bookings/${bookingId}/slip`, {
        method: "POST",
        body: formData,
      });
      if (res.success) {
        Swal.fire("‚úÖ", "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "success");
        setSlipFile(null);
        fetchBookings(); // üîÅ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        closePopup();
      } else {
        Swal.fire("‚ùå", res.message || "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "error");
      }
    } catch {
      Swal.fire("‚ùå", "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", "error");
    }
  };

  // ‚úÖ ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  useEffect(() => {
    let data = bookings;
    if (searchTerm)
      data = data.filter(
        (b) =>
          b.license_plate?.toLowerCase().includes(searchTerm.toLowerCase()) ||
          b.model?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    if (statusFilter !== "all") data = data.filter((b) => String(b.status_id) === String(statusFilter));
    if (startDate) data = data.filter((b) => new Date(b.date) >= new Date(startDate));
    if (endDate) data = data.filter((b) => new Date(b.date) <= new Date(endDate));
    setFiltered(data);
  }, [searchTerm, statusFilter, startDate, endDate, bookings]);

  if (loading) return <div className="loading">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>;

  return (
    <div className="user-page">
      <h2 className="user-title">üîß ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°</h2>

      {/* ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå */}
      <div className="filter-bar">
        <input
          type="text"
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô / ‡∏£‡∏∏‡πà‡∏ô)"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        <select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>
          <option value="all">‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</option>
          <option value="1">‡∏£‡∏≠‡∏ä‡πà‡∏≤‡∏á</option>
          <option value="2">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡πà‡∏≠‡∏°</option>
          <option value="5">‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞</option>
          <option value="3">‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</option>
          <option value="4">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</option>
        </select>
        <input type="date" value={startDate} onChange={(e) => setStartDate(e.target.value)} />
        <input type="date" value={endDate} onChange={(e) => setEndDate(e.target.value)} />
      </div>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á */}
      <table className="user-table">
        <thead>
          <tr>
            <th>#</th><th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th><th>‡πÄ‡∏ß‡∏•‡∏≤</th><th>‡∏£‡∏ñ</th><th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th><th>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</th><th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
          </tr>
        </thead>
        <tbody>
          {filtered.map((b) => {
            const s = getStatus(b.status_id);
            return (
              <tr key={b.booking_id}>
                <td>{b.booking_id}</td>
                <td>{new Date(b.date).toLocaleDateString("th-TH")}</td>
                <td>{b.time}</td>
                <td>{b.license_plate} ({b.model})</td>
                <td><span className={`status-badge ${s.class}`}>{s.text}</span></td>
                <td>{Number(b.total_price || 0).toLocaleString()} ‡∏ø</td>
                <td><button className="btn btn-detail" onClick={() => openDetail(b)}>üîç ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</button></td>
              </tr>
            );
          })}
        </tbody>
      </table>

      {/* Popup ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
      {selectedBooking && (
        <div className="popup-overlay" onClick={closePopup}>
          <div className="popup-card" onClick={(e) => e.stopPropagation()}>
            <header className="popup-header">
              <h3>üßæ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô #{selectedBooking.booking_id}</h3>
              <button className="btn-close" onClick={closePopup}>‚úñ</button>
            </header>

            <section className="popup-section info">
              <p><b>‡∏£‡∏ñ:</b> {selectedBooking.model} ({selectedBooking.license_plate})</p>
              <p><b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</b> {new Date(selectedBooking.date).toLocaleDateString("th-TH")} {selectedBooking.time}</p>
              <p><b>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</b> {selectedBooking.description || "-"}</p>
              <p><b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> <span className={`status-badge ${getStatus(selectedBooking.status_id).class}`}>{getStatus(selectedBooking.status_id).text}</span></p>
            </section>

            <section className="popup-section parts">
              <h4>üß© ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà</h4>
              <table className="small-table">
                <thead>
                  <tr><th>‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà</th><th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th><th>‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢</th><th>‡∏£‡∏ß‡∏°</th></tr>
                </thead>
                <tbody>
                  {repairItems.length > 0 ? (
                    repairItems.map((i) => (
                      <tr key={i.part_id}>
                        <td>{i.partname}</td>
                        <td>{i.quantity}</td>
                        <td>{Number(i.unit_price).toLocaleString()} ‡∏ø</td>
                        <td>{(i.unit_price * i.quantity).toLocaleString()} ‡∏ø</td>
                      </tr>
                    ))
                  ) : (
                    <tr><td colSpan="4">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà</td></tr>
                  )}
                </tbody>
              </table>
            </section>

            <section className="popup-section cost">
              <h4>üí∞ ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏ß‡∏°</h4>
              <p>‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: <b>{Number(selectedBooking.total_price || 0).toLocaleString()} ‡∏ø</b></p>
            </section>

            {/* üì∏ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏•‡∏¥‡∏õ */}
            <section className="popup-section slip">
              <h4>üì∏ ‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h4>
              {selectedBooking.slipfilename ? (
                <img
                  src={`http://localhost:3000/uploads/${selectedBooking.slipfilename}`}
                  alt="Slip"
                  className="slip-image"
                />
              ) : (
                <>
                  <p style={{ color: "#888" }}>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ</p>
                  {selectedBooking.status_id === 5 && (
                    <div className="upload-section">
                      <input
                        type="file"
                        accept="image/*"
                        onChange={(e) => setSlipFile(e.target.files[0])}
                      />
                      <button
                        className="btn btn-upload"
                        onClick={() => uploadSlip(selectedBooking.booking_id)}
                      >
                        üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ
                      </button>
                    </div>
                  )}
                </>
              )}
            </section>

            <footer className="popup-actions">
              <button className="btn btn-secondary" onClick={closePopup}>‡∏õ‡∏¥‡∏î</button>
            </footer>
          </div>
        </div>
      )}
    </div>
  );
}
